{"version":3,"sources":["context/AppContext.js","components/Mode.js","components/Settings.js","components/Timer.js","layouts/App.js","index.js"],"names":["ACTIONS","initialState","id","name","isActive","value","isCreatedBySystem","initializer","initialValue","JSON","parse","localStorage","getItem","AppContext","createContext","AppProvider","children","createModel","Date","now","useReducer","modes","action","type","payload","map","mode","dispatch","useState","settingsVisible","setSettingsVisible","playerOneTime","setPlayerOneTime","playerTwoTime","setPlayerTwoTime","isPlayerOneTurn","setIsPlayerOneTurn","isPlayerTwoTurn","setIsPlayerTwoTurn","isPaused","setIsPaused","idOne","useRef","idTwo","useEffect","setItem","stringify","activeMode","filter","setActiveModeTime","console","log","window","clearInterval","current","setInterval","prevValue","Provider","toggleSettingsVisible","togglePaused","toggleTurn","Mode","useContext","classes","className","onClick","Settings","toggleVisible","modeComponents","Timer","settingsComponent","startButtonIcon","startButtonClasses","playerOneAreaClasses","playerTwoAreaClasses","generatePlayerInfo","playerTurnInfo","convertTime","minutes","Math","floor","seconds","playerOneTimeConverted","playerTwoTimeConverted","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d4cafd4.chunk.js","sourcesContent":["import React, { createContext, useEffect, useReducer, useRef, useState } from 'react';\r\n\r\nexport const ACTIONS = {\r\n  ADD_MODE: 'add-mode',\r\n  EDIT_MODE: 'edit-mode',\r\n  REMOVE_MODE: 'remove-mode',\r\n  TOGGLE_MODE: 'toggle-mode'\r\n};\r\n\r\nconst initialState = [\r\n  { id: 1618566292337, name: 'Classic', isActive: true, value: 30, isCreatedBySystem: true },\r\n  { id: 1618566540517, name: 'Rapid', isActive: false, value: 15, isCreatedBySystem: true },\r\n  { id: 1618566689616, name: 'Erambo', isActive: false, value: 10, isCreatedBySystem: true },\r\n  { id: 1618566628616, name: 'Blitz', isActive: false, value: 5, isCreatedBySystem: true },\r\n  { id: 1618566740721, name: 'Bullet', isActive: false, value: 3, isCreatedBySystem: true },\r\n  { id: 1618566823233, name: 'Lightning', isActive: false, value: 1, isCreatedBySystem: true }\r\n];\r\n\r\nconst initializer = (initialValue = initialState) => JSON.parse(localStorage.getItem(\"localModes\")) || initialValue;\r\n\r\nexport const AppContext = createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n  \r\n  const reducer = (modes, action) => {\r\n    switch (action.type) {\r\n      case ACTIONS.ADD_MODE:\r\n        return [...modes, createModel(action.payload.name, action.payload.value)];\r\n      case ACTIONS.TOGGLE_MODE:\r\n        return modes.map((mode) => {\r\n          if(mode.id !== action.payload.id && mode.isActive) return {...mode, isActive: false};\r\n          else if(mode.id === action.payload.id) return { ...mode, isActive: !mode.isActive};\r\n          else return mode;\r\n        });\r\n      default:\r\n        return modes;\r\n    }\r\n  }\r\n\r\n  const createModel = (name, value) => {\r\n    return { id: Date.now(), name: name, isActive: false, value: value, isCreatedBySystem: false };\r\n  }\r\n\r\n  const [modes, dispatch] = useReducer(reducer, initialState, initializer);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [playerOneTime, setPlayerOneTime] = useState(1);\r\n  const [playerTwoTime, setPlayerTwoTime] = useState(1);\r\n\r\n  const [isPlayerOneTurn, setIsPlayerOneTurn] = useState(true);\r\n  const [isPlayerTwoTurn, setIsPlayerTwoTurn] = useState(false);\r\n\r\n  const [isPaused, setIsPaused] = useState(true);\r\n\r\n  const idOne = useRef(null);\r\n  const idTwo = useRef(null);\r\n\r\n  const toggleTurn = () => {\r\n    setIsPlayerOneTurn((prevValue) => !prevValue);\r\n    setIsPlayerTwoTurn((prevValue) => !prevValue);\r\n  };\r\n\r\n  const togglePaused = () => {\r\n    setIsPaused((prevValue) => !prevValue);\r\n  };\r\n\r\n  const toggleSettingsVisible = () => {\r\n    setSettingsVisible((prevValue) => !prevValue);\r\n  };\r\n\r\n  const setActiveModeTime = () => {\r\n    const activeMode = modes.filter((mode) => mode.isActive);\r\n    setPlayerOneTime(activeMode[0].value * 60);\r\n    setPlayerTwoTime(activeMode[0].value * 60);\r\n  };\r\n\r\n  const stopActiveUserTimer = () => {\r\n    if(isPlayerOneTurn) {\r\n      window.clearInterval(idOne.current);\r\n    }\r\n\r\n    if(isPlayerTwoTurn) {\r\n      window.clearInterval(idTwo.current);\r\n    }\r\n  };\r\n\r\n  const continueActiveUserTimer = () => {\r\n    if(isPlayerOneTurn) {\r\n      idOne.current = window.setInterval(() => {\r\n        setPlayerOneTime((prevValue) => prevValue - 1);\r\n      }, 1000);\r\n    }\r\n\r\n    if(isPlayerTwoTurn) {\r\n      idTwo.current = window.setInterval(() => {\r\n        setPlayerTwoTime((prevValue) => prevValue - 1);\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('localModes', JSON.stringify(modes))\r\n    setActiveModeTime();\r\n  }, [modes]);\r\n\r\n  useEffect(() => {\r\n    if(isPaused === true) {\r\n      console.log('Stop active user timer');\r\n      stopActiveUserTimer();\r\n    } else {\r\n      console.log('Continue active user timer');\r\n      continueActiveUserTimer();\r\n    }\r\n  }, [isPaused]);\r\n\r\n  useEffect(() => {\r\n    if(!isPaused) {\r\n      if(isPlayerOneTurn === true) {\r\n        idOne.current = window.setInterval(() => {\r\n          setPlayerOneTime((prevValue) => prevValue - 1);\r\n        }, 1000);\r\n      } else {\r\n        window.clearInterval(idOne.current);\r\n      }\r\n    }\r\n  }, [isPlayerOneTurn]);\r\n\r\n  useEffect(() => {\r\n    if(!isPaused) {\r\n      if(isPlayerTwoTurn === true) {\r\n        idTwo.current = window.setInterval(() => {\r\n          setPlayerTwoTime((prevValue) => prevValue - 1);\r\n        }, 1000);\r\n      } else {\r\n        window.clearInterval(idTwo.current);\r\n      }\r\n    }\r\n  }, [isPlayerTwoTurn]);\r\n\r\n  useEffect(() => {\r\n    if(playerOneTime === 0) {\r\n      window.clearInterval(idOne.current);\r\n    }\r\n  }, [playerOneTime]);\r\n\r\n  useEffect(() => {\r\n    if(playerTwoTime === 0) {\r\n      window.clearInterval(idTwo.current);\r\n    }\r\n  }, [playerTwoTime]);\r\n\r\n  return(\r\n    <AppContext.Provider value={{\r\n      modes,\r\n      dispatch,\r\n      settingsVisible,\r\n      toggleSettingsVisible,\r\n      playerOneTime,\r\n      playerTwoTime,\r\n      isPaused,\r\n      togglePaused,\r\n      isPlayerOneTurn,\r\n      isPlayerTwoTurn,\r\n      toggleTurn\r\n    }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AppProvider;","import React, { useContext } from 'react';\r\n\r\nimport { ACTIONS } from '../context/AppContext';\r\nimport { AppContext } from '../context/AppContext';\r\n\r\nimport './Mode.css';\r\n\r\nconst Mode = ({ mode }) => {\r\n\r\n  const { dispatch } = useContext(AppContext);\r\n  const classes = `mode ${mode.isActive ? 'active' : ''}`;\r\n\r\n  return(\r\n    <div className={classes} onClick={() => {\r\n      if(!mode.isActive) dispatch({type: ACTIONS.TOGGLE_MODE, payload: { id: mode.id }});\r\n      }}>\r\n      <p className='mode__name'>{mode.name}</p>\r\n      <p className='mode__value'>{mode.value}</p>\r\n      <p className='mode__unit'>min</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Mode;","import React, { useContext } from 'react';\r\n\r\nimport Mode from './Mode';\r\nimport { AppContext } from '../context/AppContext';\r\n\r\nimport './Settings.css';\r\n\r\nconst Settings = () => {\r\n\r\n  // Dispatch here for adding game mode\r\n  const { modes, dispatch, toggleSettingsVisible : toggleVisible } = useContext(AppContext);\r\n\r\n  const modeComponents = modes.map((mode) => {\r\n    return <Mode key={mode.id} mode={mode} />;\r\n  });\r\n\r\n  return (\r\n    <div className=\"settings\">\r\n      <div className=\"settings__container\">\r\n        <div className=\"settings__header\">\r\n          <i className=\"fas fa-chevron-left\" onClick={toggleVisible}></i>\r\n          <p className='settings__header-text'>Settings</p>\r\n        </div>\r\n        <div className=\"settings__main\">\r\n          {modeComponents}\r\n        </div>\r\n        <div className=\"settings__footer\">\r\n          <button className='settings__add-mode-btn' onClick={() => console.log('ADD MODE CLICKED')}>\r\n            <i className=\"fas fa-plus\"></i>\r\n          </button>\r\n          <p className='settings__btn-title'>Game Mode</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;","import React, { useContext } from 'react';\r\n\r\n\r\nimport Settings from './Settings';\r\nimport { AppContext } from '../context/AppContext';\r\n\r\nimport './Timer.css';\r\n\r\nconst Timer = () => {\r\n\r\n  const { \r\n    settingsVisible, \r\n    toggleSettingsVisible : toggleVisible, \r\n    playerOneTime, \r\n    playerTwoTime, \r\n    isPaused, \r\n    togglePaused, \r\n    isPlayerOneTurn, \r\n    isPlayerTwoTurn ,\r\n    toggleTurn\r\n  } = useContext(AppContext);\r\n\r\n  const settingsComponent = settingsVisible \r\n  ? <Settings/> \r\n  : null;\r\n\r\n  const startButtonIcon = isPaused \r\n  ? <i className=\"fas fa-play\"></i> \r\n  : <i className=\"fas fa-pause\"></i>;\r\n  const startButtonClasses = isPaused \r\n  ? 'timer__btn-start paused' \r\n  : 'timer__btn-start';\r\n  const playerOneAreaClasses = isPlayerOneTurn \r\n  ? 'timer__player-area down activeTurn' \r\n  : 'timer__player-area down'; \r\n  const playerTwoAreaClasses = isPlayerTwoTurn \r\n  ? 'timer__player-area up activeTurn' \r\n  : 'timer__player-area up';\r\n  \r\n  const generatePlayerInfo = (playerTurnInfo) => {\r\n    if(!isPaused && playerTurnInfo) return 'Your turn';\r\n    else if(!isPaused && !playerTurnInfo) return 'Waiting for turn';\r\n    else return 'Waiting for start';\r\n  };\r\n\r\n  const convertTime = (value) => {\r\n    const minutes = Math.floor(value / 60) < 10 \r\n    ? `0${Math.floor(value / 60)}` \r\n    : Math.floor(value / 60);\r\n\r\n    const seconds = value % 60 < 10 \r\n    ? `0${value % 60}` \r\n    : value % 60;\r\n\r\n    return { minutes: minutes, seconds: seconds };\r\n  }\r\n\r\n  const playerOneTimeConverted = convertTime(playerOneTime);\r\n  const playerTwoTimeConverted = convertTime(playerTwoTime);\r\n  \r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      {settingsComponent}\r\n      <div className={playerTwoAreaClasses} onClick={() => {\r\n        if(isPlayerTwoTurn) toggleTurn();\r\n      }}>\r\n        <p className='timer__time'>\r\n          {playerTwoTimeConverted.minutes}:{playerTwoTimeConverted.seconds}\r\n        </p>\r\n        <p className='timer__info'>{generatePlayerInfo(isPlayerTwoTurn)}</p>\r\n      </div>\r\n      <div className=\"timer__buttons\">\r\n        <button className='timer__btn-settings' onClick={toggleVisible}>\r\n          <i className=\"fas fa-bars\"></i>\r\n        </button>\r\n        <button className={startButtonClasses} onClick={togglePaused}>\r\n          {startButtonIcon}\r\n        </button>\r\n        <button className='timer__btn-reset'>\r\n          <i className=\"fas fa-redo-alt\"></i>\r\n        </button>\r\n      </div>\r\n      <div className={playerOneAreaClasses} onClick={() => {\r\n        if(isPlayerOneTurn) toggleTurn();\r\n      }}>\r\n        <p className='timer__time'>\r\n          {playerOneTimeConverted.minutes}:{playerOneTimeConverted.seconds}\r\n        </p>\r\n        <p className='timer__info'>{generatePlayerInfo(isPlayerOneTurn)}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;","import React from 'react';\n\nimport Timer from '../components/Timer';\nimport AppProvider from '../context/AppContext';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <AppProvider>\n      <div className='app'>\n        <Timer/>\n      </div>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './layouts/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}